use std::io::Write;
use std::path::Path;
use std::{fmt::Display, fs::File};

use core::Bitboard;
use generator::{
    generate_bishop_magic_data, generate_king_attacks, generate_knight_attacks,
    generate_pawn_attacks, generate_rook_magic_data,
};

fn map_bitboards(bitboards: &[Bitboard]) -> Vec<u64> {
    bitboards.iter().map(|v| v.to_repr()).collect()
}

trait Printable: Display {
    fn printed_type() -> &'static str;
}

impl Printable for u64 {
    fn printed_type() -> &'static str {
        "u64"
    }
}

impl Printable for u8 {
    fn printed_type() -> &'static str {
        "u8"
    }
}

impl Printable for usize {
    fn printed_type() -> &'static str {
        "usize"
    }
}

fn write_array<T: Printable>(f: &mut File, name: &str, array: &[T]) {
    writeln!(
        f,
        "pub static {}: [{}; {}] = [\n{}\n];\n",
        name,
        T::printed_type(),
        array.len(),
        array
            .iter()
            .map(|v| format!("    {},", v))
            .collect::<Vec<_>>()
            .join("\n")
    )
    .unwrap();
}

fn main() {
    let out_dir = std::env::var("OUT_DIR").unwrap();
    let file_path = Path::new(&out_dir).join("generated.rs");
    let mut f = File::create(&file_path).unwrap();

    let ts_start = std::time::SystemTime::now();

    let pawn_attacks = generate_pawn_attacks();
    let knight_attacks = generate_knight_attacks();
    let king_attacks = generate_king_attacks();

    let bishop_magic_data = generate_bishop_magic_data();
    let rook_magic_data = generate_rook_magic_data();

    let ts_end = std::time::SystemTime::now();

    writeln!(f, "// @generated by build.rs\n").unwrap();

    writeln!(
        f,
        "// timestamp : {}",
        ts_start
            .duration_since(std::time::UNIX_EPOCH)
            .unwrap()
            .as_secs()
    )
    .unwrap();
    writeln!(
        f,
        "// took : {}ms\n",
        ts_end.duration_since(ts_start).unwrap().as_millis()
    )
    .unwrap();

    write_array(&mut f, "PAWN_ATTACKS", &map_bitboards(&pawn_attacks));
    write_array(&mut f, "KNIGHT_ATTACKS", &map_bitboards(&knight_attacks));
    write_array(&mut f, "KING_ATTACKS", &map_bitboards(&king_attacks));

    write_array(&mut f, "BISHOP_MASKS", &bishop_magic_data.masks);
    write_array(&mut f, "BISHOP_SHIFTS", &bishop_magic_data.shifts);
    write_array(&mut f, "BISHOP_MAGICS", &bishop_magic_data.magics);
    write_array(&mut f, "BISHOP_OFFSETS", &bishop_magic_data.offsets);
    write_array(&mut f, "BISHOP_ATTACKS", &bishop_magic_data.attacks);

    write_array(&mut f, "ROOK_MASKS", &rook_magic_data.masks);
    write_array(&mut f, "ROOK_SHIFTS", &rook_magic_data.shifts);
    write_array(&mut f, "ROOK_MAGICS", &rook_magic_data.magics);
    write_array(&mut f, "ROOK_OFFSETS", &rook_magic_data.offsets);
    write_array(&mut f, "ROOK_ATTACKS", &rook_magic_data.attacks);

    println!("cargo:rerun-if-changed=build.rs");
}
